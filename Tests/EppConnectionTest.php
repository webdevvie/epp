<?php

namespace Webdevvie\Epp\Tests;

use Mockery\MockInterface;
use Webdevvie\Epp\EppConnection;
use Webdevvie\Epp\Messages\EppMessage;
use Webdevvie\Epp\Simple\Command\DomainCheck;

class EppConnectionTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var MockInterface
     */
    private $rawconnection;

    /**
     * @var EppConnection
     */
    private $connection;

    public function setUp()
    {
        $this->rawconnection = \Mockery::mock('Webdevvie\Epp\RawEppConnection');
        $this->connection = new EppConnection('test.com', 7000, 'test', 'password');
        $this->connection->setConnection($this->rawconnection);
        $this->connection->setAutoDestruct(false);
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testConnect()
    {

        $this->rawconnection->shouldReceive('connectToServer')->with(60)->andReturn();
        $this->rawconnection->shouldReceive('isConnected')->andReturn(true);
        $this->rawconnection->shouldReceive('read')->andReturn($this->getTestMessage('Greeting'));
        $this->assertTrue($this->connection->connect());
        $welcome = $this->connection->getWelcomeMessage();
        $this->assertEquals('Webdevvie\Epp\Messages\EppMessage', get_class($welcome));
    }

    public function testLoginMimickServerGreeting()
    {

        $this->rawconnection->shouldReceive('connectToServer')->with(60)->andReturn();
        $this->rawconnection->shouldReceive('isConnected')->andReturn(true);
        $this->rawconnection->shouldReceive('read')->andReturn($this->getTestMessage('Greeting'))->once();
        $this->rawconnection->shouldReceive('write')->once();
        $this->rawconnection->shouldReceive('read')->andReturn($this->getTestMessage('Login'))->once();
        $this->assertTrue($this->connection->connect());
        $this->connection->setMimickServerGreeting(true);
        $this->connection->login();
        $welcome = $this->connection->getWelcomeMessage();
        $this->assertEquals('Webdevvie\Epp\Messages\EppMessage', get_class($welcome));

    }

    public function testConnectFailed()
    {

        $this->rawconnection->shouldReceive('connectToServer')->with(60)->andReturn();
        $this->rawconnection->shouldReceive('isConnected')->andReturn(true);
        $this->rawconnection->shouldReceive('read')->andReturn('poop');
        $this->rawconnection->shouldReceive('isConnected')->andReturn(true);
        $this->rawconnection->shouldReceive('disconnect')->andReturn(true);
        $this->assertFalse($this->connection->connect());
    }

    public function testConnectFailedNoContent()
    {

        $this->rawconnection->shouldReceive('connectToServer')->with(60)->andReturn();
        $this->rawconnection->shouldReceive('isConnected')->andReturn(true);
//        $this->expectException('Webdevvie\Epp\Exception\ConnectionException');
//        $this->expectExceptionMessage("Request read error");
//        $this->expectExceptionCode(1);
        $this->rawconnection->shouldReceive('read')->andReturn(false);
        $this->rawconnection->shouldReceive('isConnected')->andReturn(true);
        $this->rawconnection->shouldReceive('disconnect')->andReturn(true);
        $this->assertFalse($this->connection->connect());
    }

    public function testConnectBadGreeting()
    {

        $this->rawconnection->shouldReceive('connectToServer')->with(60)->andReturn();
        $this->rawconnection->shouldReceive('isConnected')->andReturn(false);
        $this->assertFalse($this->connection->connect());
    }

    public function testSendCommand()
    {

        $this->rawconnection->shouldReceive('isConnected')->andReturn(true)->once();
        $this->rawconnection->shouldReceive('write')->once();
        $this->rawconnection->shouldReceive('read')->andReturn($this->getTestMessage('Login'))->once();
        $this->rawconnection->shouldReceive('write')->once();
        $this->rawconnection->shouldReceive('read')->andReturn($this->getTestMessage('DomainCheck'))->once();
        $this->rawconnection->shouldReceive('write')->once();
        $this->rawconnection->shouldReceive('read')->andReturn($this->getTestMessage('Logout'))->once();
        $this->rawconnection->shouldReceive('disconnect')->once();
        $this->connection->login();
        $command = new DomainCheck(['test.com', 'test1234.frl', 'test12345.frl']);
        $response = $this->connection->sendCommand($command);
        $this->connection->disconnect();
        /**
         * @var \Webdevvie\Epp\Simple\Response\DomainCheck $response
         */
        $this->assertEquals(1000, $response->getResponseCode());
        $this->assertEquals('Command completed successfully', $response->getResponseMessage());
//        file_put_contents(__DIR__.'/Resources/TestMessages/DomainCheck.json',json_encode($response->getCheckResults(),JSON_PRETTY_PRINT));
        $expectedArray = json_decode(file_get_contents(__DIR__ . '/Resources/TestMessages/DomainCheck.json'), true);
        $this->assertEquals($expectedArray, $response->getCheckResults());
    }

    public function testSendCommandBadResponse()
    {

        $this->rawconnection->shouldReceive('isConnected')->andReturn(true)->once();
        $this->rawconnection->shouldReceive('write')->once();
        $this->rawconnection->shouldReceive('read')->andReturn($this->getTestMessage('Login'))->once();
        $this->rawconnection->shouldReceive('write')->once();
        $this->rawconnection->shouldReceive('read')->andReturn(false)->once();
        $this->rawconnection->shouldReceive('disconnect')->once();
        $this->connection->login();
        $command = new DomainCheck(['test.com', 'test1234.frl', 'test12345.frl']);
        $this->expectException('Webdevvie\Epp\Exception\ConnectionException');
        $this->expectExceptionMessage("Request read error");
        $this->expectExceptionCode(2);
        $response = $this->connection->sendCommand($command);
    }

    public function testSendCommandNoConnection()
    {

        $this->rawconnection->shouldReceive('isConnected')->andReturn(false)->once();
        $command = new DomainCheck(['test.com', 'test1234.frl', 'test12345.frl']);
        $this->expectException('Webdevvie\Epp\Exception\ConnectionException');
        $this->expectExceptionMessage("Cannot write without being connected");
        $this->expectExceptionCode(1);
        $this->connection->sendCommand($command);
    }

    public function testLogoutNoConnection()
    {

        $this->rawconnection->shouldReceive('isConnected')->andReturn(false)->once();
        $command = new DomainCheck(['test.com', 'test1234.frl', 'test12345.frl']);
        $this->expectException('Webdevvie\Epp\Exception\ConnectionException');
        $this->expectExceptionMessage("cannot logout when not connected");
        $this->expectExceptionCode(1);
        $this->connection->logout();
    }

    public function testLogoutNotLoggedIn()
    {

        $this->rawconnection->shouldReceive('isConnected')->andReturn(true)->once();
        $command = new DomainCheck(['test.com', 'test1234.frl', 'test12345.frl']);
        $this->expectException('Webdevvie\Epp\Exception\LoginException');
        $this->expectExceptionMessage("cannot logout when not logged in");
        $this->expectExceptionCode(1);
        $this->connection->logout();
    }
    public function testHelloNoConnection()
    {

        $this->rawconnection->shouldReceive('isConnected')->andReturn(false)->once();
        $command = new DomainCheck(['test.com', 'test1234.frl', 'test12345.frl']);
        $this->expectException('Webdevvie\Epp\Exception\ConnectionException');
        $this->expectExceptionMessage("cannot send hello when not connected");
        $this->expectExceptionCode(1);
        $this->connection->hello();
    }

    public function testLoginNoConnection()
    {

        $this->rawconnection->shouldReceive('isConnected')->andReturn(false)->once();
        $this->rawconnection->shouldReceive('connectToServer')->with(60)->andReturn();
        $this->rawconnection->shouldReceive('isConnected')->andReturn(true);
        $this->rawconnection->shouldReceive('read')->andReturn($this->getTestMessage('Greeting'))->once();
        $this->rawconnection->shouldReceive('write')->once();
        $this->rawconnection->shouldReceive('read')->andReturn($this->getTestMessage('Login'))->once();
        $this->assertTrue($this->connection->login());
        $welcome = $this->connection->getWelcomeMessage();
        $this->assertEquals('Webdevvie\Epp\Messages\EppMessage', get_class($welcome));
    }

    public function testLoggedInDisconnect()
    {

        $this->rawconnection->shouldReceive('isConnected')->andReturn(true)->once();
        $this->rawconnection->shouldReceive('write')->once();
        $this->rawconnection->shouldReceive('read')->andReturn($this->getTestMessage('Login'))->once();
        $this->rawconnection->shouldReceive('write')->once();
        $this->rawconnection->shouldReceive('read')->andReturn($this->getTestMessage('Logout'))->once();
        $this->rawconnection->shouldReceive('disconnect')->once();
        $this->connection->login();
        $this->connection->disconnect();
    }

    public function testLoginBadResponse()
    {

        $this->rawconnection->shouldReceive('isConnected')->andReturn(true)->once();
        $this->rawconnection->shouldReceive('write')->once();
        $this->rawconnection->shouldReceive('read')->andReturn($this->getTestMessage('LoginFailed'))->once();
        $this->expectException('Webdevvie\Epp\Exception\LoginException');
        $this->expectExceptionMessage("Leprechauns stole this message");
        $this->expectExceptionCode(2500);
        $this->connection->login();
    }

    public function testLogoutBadResponse()
    {

        $this->rawconnection->shouldReceive('isConnected')->andReturn(true)->once();
        $this->rawconnection->shouldReceive('write')->once();
        $this->rawconnection->shouldReceive('read')->andReturn($this->getTestMessage('Login'))->once();
        $this->rawconnection->shouldReceive('write')->once();
        $this->rawconnection->shouldReceive('read')->andReturn($this->getTestMessage('LogoutFailed'))->once();
        $this->expectException('Webdevvie\Epp\Exception\LoginException');
        $this->expectExceptionMessage("Leprechauns stole this message");
        $this->expectExceptionCode(2500);
        $this->connection->login();
        $this->connection->logout();
    }
    public function testHello()
    {
        $this->rawconnection->shouldReceive('isConnected')->andReturn(true)->once();
        $this->rawconnection->shouldReceive('write')->once();
        $this->rawconnection->shouldReceive('read')->andReturn($this->getTestMessage('Greeting'))->once();
        $this->connection->hello();
    }
    public function testHelloBadResponse()
    {
        $this->rawconnection->shouldReceive('isConnected')->andReturn(true)->once();
        $this->rawconnection->shouldReceive('write')->once();
        $this->rawconnection->shouldReceive('read')->andReturn($this->getTestMessage('LogoutFailed'))->once();
        $this->expectException('Webdevvie\Epp\Exception\ConnectionException');
        $this->expectExceptionMessage("No greeting as a response to hello");
        $this->expectExceptionCode(1);
        $this->connection->hello();
    }

    public function testDisconnect()
    {

        $this->rawconnection->shouldReceive('isConnected')->andReturn(true)->once();
        $this->rawconnection->shouldReceive('disconnect')->once();
        $this->connection->disconnect();
    }

    public function testDisconnectNotConnected()
    {

        $this->rawconnection->shouldReceive('isConnected')->andReturn(false)->once();
        $this->rawconnection->shouldReceive('disconnect')->once();
        $this->connection->disconnect();
    }

    public function testDisconnectNoObject()
    {
        $this->connection->setConnection(null);
        $this->connection->disconnect();
    }

    public function testDebugger()
    {
        $messages = [];
        $debugger = function ($msg) use (&$messages) {
            $messages[] = $msg;
        };
        $this->connection->setDebugger($debugger);
        $this->connection->debug('test');
        $this->assertEquals(['test'], $messages);
    }

    public function testIsConnectedNoObject()
    {
        $this->connection->setConnection(null);
        $this->assertFalse($this->connection->isConnected());
    }

    /**
     * @param $respMsg
     * @return bool|string
     */
    private function getTestMessage($respMsg)
    {
        $return = file_get_contents(__DIR__ . '/Resources/TestMessages/' . $respMsg . '.xml');
        return $return;
    }
}